# Mini-project #6 - Blackjack

import simplegui
import random

# load card sprite - 936x384 - source: jfitz.com
CARD_SIZE = (72, 96)
CARD_CENTER = (36, 48)
card_images = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png")

CARD_BACK_SIZE = (72, 96)
CARD_BACK_CENTER = (36, 48)
card_back = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/card_jfitz_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
score = 0

player_hand=[]
dealer_hand=[]
deck=[]
score=0
status=""
# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class

class Hand:
    def __init__(self):
        self.hand= []	# create Hand object

    def __str__(self):
        result=""
        for obj in self.hand:   # return a string representation of a hand
            result+= obj.suit + obj.rank +" "
        return "Hand contains " + result
    def add_card(self, card):
        self.hand.append(card)	# add a card object to a hand

    def get_value(self):
        # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust
        check_ACE=False
        value=0
        for card in self.hand:	# compute the value of the hand, see Blackjack video
            if card.rank=='A':
                check_ACE=True
            value+=VALUES[card.rank]
        
        if check_ACE==False:
            return value
        elif value + 10 <= 21:
            return value +10
        else:
            return value
        
    def draw(self, canvas, pos):
        x=pos[0]; y=pos[1]
        # draw a hand on the canvas, use the draw method for cards
        for card in self.hand:	        
            card.draw(canvas,(x,y))
            x+=72
        


        
# define deck class 
class Deck:
    def __init__(self):
        self.deck= []
        for i in SUITS:
            for j in RANKS:
                self.deck.append(Card(i,j))

    def shuffle(self):
        # shuffle the deck 
        random.shuffle(self.deck)    # use random.shuffle()

    def deal_card(self):
        return self.deck.pop()	# deal a card object from the deck
    
    def __str__(self):
        result=""
        for obj in self.deck:   # return a string representation of a hand
            result+= obj.suit + obj.rank +" "
        return "Deck Contains contains " + result



#define event handlers for buttons
def deal():
    global outcome, in_play, player_hand, dealer_hand, deck, status, score
    
    if in_play == True:
        in_play=False
        status="Player lose by forfeit."
        score-=1
    else:    
        deck=Deck()
    
        player_hand=Hand()
        dealer_hand=Hand()
    
        deck.shuffle()
    
        player_hand.add_card(deck.deal_card());  player_hand.add_card(deck.deal_card())
        dealer_hand.add_card(deck.deal_card());  dealer_hand.add_card(deck.deal_card())
    
        in_play=True
    

def hit():
    global player_hand, deck, in_play, score, status
    if in_play==True:
        if player_hand.get_value() <= 21 :	
        # if the hand is in play, hit the player
            player_hand.add_card(deck.deal_card())   
        # if busted, assign a message to outcome, update in_play and score

        if player_hand.get_value() > 21 : 
            status= "Your Busted."
            in_play = False
            score-=1
        
def stand():
    global in_play, dealer_hand, player_hand, score, status
    
    if in_play==True:
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more

        while ( dealer_hand.get_value()<17 ):
            dealer_hand.add_card(deck.deal_card())
        
        if dealer_hand.get_value()>21:
            status= "Dealer Busted."
            score+=1
            in_play=False
        else:
            if player_hand.get_value()>dealer_hand.get_value():
                status= "Player Wins."
                score+=1
                in_play=False
        # assign a message to outcome, update in_play and score
            else:
                status="Dealer Wins."
                score-=1
                in_play=False
# draw handler    
def draw(canvas):
    global score, player_hand, dealer_hand,in_play, status
    # Add text labels
    canvas.draw_text('Blackjack', (50, 70), 50, 'Yellow')
    canvas.draw_text('Score: ' + str(score), (400, 70), 30, 'White')
    canvas.draw_text('Dealer', (50, 150), 30, 'White')
    canvas.draw_text('Player', (50, 370), 30, 'White')
    #Draw cards
    
    if in_play==True:
        dealer_hand.draw(canvas, (50,200))
        canvas.draw_image(card_back, CARD_BACK_CENTER, CARD_BACK_SIZE,(50+CARD_BACK_CENTER[0],200+CARD_BACK_CENTER[1]), CARD_BACK_SIZE)
    else:
        dealer_hand.draw(canvas, (50,200))
   
    player_hand.draw(canvas, (50,420))
    #Draw Command box
    canvas.draw_polygon([[100, 540], [500, 540], [500, 580], [100, 580]], 2, 'Black', 'White')
    
    
    #Add promps
    if in_play==True:
        canvas.draw_text('Hit or Stand?', (120, 570), 25, 'Black')
    else:
        canvas.draw_text( status + "    New Deal?", (120, 570), 25, 'Black')
    

# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)


# get things rolling
deal()
frame.start()


# remember to review the gradic rubric
