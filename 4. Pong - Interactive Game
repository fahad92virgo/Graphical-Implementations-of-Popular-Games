# Please run the code on http://www.codeskulptor.org/
# Link: http://www.codeskulptor.org/#user40_TZRp593OT3_13.py

# Implementation of classic arcade game Pong by Fahad Sarfraz
# Multiplayer Mode: 
# For player 1 Use 'w' and 's' keys to move the paddle up and down respectively
# For player 2 Use 'Up' and 'Down' keys to move the paddle up and down respectively
# Single Player Mode: (Added Functionality)
# Press the Single Player Mode

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
Mode='Multiplayer'
cpu_Mode=False
pad_vel=4
turn=10

WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True

paddle1_pos=160
paddle2_pos=160
paddle1_vel=0
paddle2_vel=0

# Set the initial velocity components
horizontal_vel=0                   
vertical_vel=0                     

# initialize ball_pos and ball_vel for new bal in middle of table
ball_pos=[WIDTH/2, HEIGHT/2]
ball_vel=[horizontal_vel,vertical_vel]

#Initialize scores
score1=0
score2=0

# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel, vertical_vel, horizontal_vel, turn # these are vectors stored as lists
    
    turn=random.randrange(2, 10)
    
    ball_pos=[WIDTH/2, HEIGHT/2] 
    vertical_vel=-random.randrange(1, 3)
    
    if (direction==RIGHT):
        horizontal_vel=abs(horizontal_vel)
        horizontal_vel= random.randrange(2, 4)
    elif (direction==LEFT):
        horizontal_vel=-random.randrange(2, 4)
        horizontal_vel=-abs(horizontal_vel)
    ball_vel=[horizontal_vel,vertical_vel]

# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    paddle1_pos=160
    paddle2_pos=160
    score1=0
    score2=0
    if (random.randrange(0, 2)):
        spawn_ball(RIGHT)
    else:
        spawn_ball(LEFT)
        
def cpu():
    global cpu_Mode, turn
    cpu_Mode=True
    turn=random.randrange(4, 10)
    new_game()

    
def multiplayer():
    global cpu_Mode
    cpu_Mode=False
    new_game()
    
def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel, \
    paddle1_vel, paddle2_vel, vertical_vel, horizontal_vel, cpu_Mode, turn
    
    if(cpu_Mode==True):
        label.set_text('Game Mode: Single Player')
    else:
        label.set_text('Game Mode: Multiple Player')
    
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        

    #Handle the Up and Down side wall relection and collision of ball        
    if (ball_pos[1]<= BALL_RADIUS):
        ball_vel[1]=-ball_vel[1]
    
    elif (ball_pos[1]>= HEIGHT - BALL_RADIUS):
        ball_vel[1]=-ball_vel[1]        
        
    # update ball     
    ball_pos[0]+=ball_vel[0]        
    ball_pos[1]+=ball_vel[1]
    
    # draw ball
    canvas.draw_circle(ball_pos, BALL_RADIUS, 1, 'White', 'White')
    
    # update paddle's vertical position, keep paddle on the screen    

    
    if(paddle1_pos+paddle1_vel>=0 and paddle1_pos+paddle1_vel<=HEIGHT-PAD_HEIGHT):
        paddle1_pos+=paddle1_vel

    if (cpu_Mode==True):
        if (turn>=0):
            paddle2_pos=ball_pos[1]-40
        else:
            paddle2_pos=ball_pos[1]+40    

    elif(paddle2_pos+paddle2_vel>=0 and paddle2_pos+paddle2_vel<=HEIGHT-PAD_HEIGHT):    
        paddle2_pos+=paddle2_vel
    
    # draw paddles
    canvas.draw_line((0, paddle1_pos), (0, paddle1_pos + PAD_HEIGHT),16, 'White')           
    canvas.draw_line((WIDTH-1, paddle2_pos), (WIDTH-1, paddle2_pos+PAD_HEIGHT),16, 'White')
    
    # determine whether paddle and ball collide    
    if (ball_pos[0]<=PAD_WIDTH + BALL_RADIUS):
        if(paddle1_pos <= ball_pos[1] <= paddle1_pos + PAD_HEIGHT):
            ball_vel[0]*=1.10
            ball_vel[1]*=1.10
            ball_vel[0]=-ball_vel[0]
        else:
            spawn_ball(RIGHT)
            score2+=1
    
    elif (ball_pos[0]>= WIDTH-PAD_WIDTH - BALL_RADIUS):
        if(paddle2_pos <= ball_pos[1] <= paddle2_pos + PAD_HEIGHT):
            ball_vel[0]*=1.10
            ball_vel[1]*=1.10
            ball_vel[0]=-ball_vel[0]
            turn-=1
        else:
            spawn_ball(LEFT)
            score1+=1
    # draw scores
    canvas.draw_text(str(score1), (150, 50), 40, 'Yellow')
    canvas.draw_text(str(score2), (450, 50), 40, 'Yellow')
    
def keydown(key):
    global paddle1_vel, paddle2_vel

    if key==simplegui.KEY_MAP['w']: 
        paddle1_vel=-pad_vel
    elif key==simplegui.KEY_MAP['s']: 
        paddle1_vel=pad_vel        
    elif key==simplegui.KEY_MAP['up']:
        paddle2_vel=-pad_vel
    elif key==simplegui.KEY_MAP['down']:
        paddle2_vel=pad_vel

        
def keyup(key):
    global paddle1_vel, paddle2_vel
    if key==simplegui.KEY_MAP['w']: 
        paddle1_vel=0
    elif key==simplegui.KEY_MAP['s']: 
        paddle1_vel=0        
    elif key==simplegui.KEY_MAP['up']:
        paddle2_vel=0
    elif key==simplegui.KEY_MAP['down']:
        paddle2_vel=0


# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_canvas_background('Green')
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.add_button('Restart', new_game,120)

frame.add_button('Multiplayer', multiplayer,120)
frame.add_button('Single Player', cpu ,120)
label = frame.add_label('Label')

label.set_text('Game Mode:' + Mode )

# start frame
new_game()
frame.start()
